class PBCore play
{
	static int GetWeightedResult(out Array<int> weights, int defRet = 0)
	{
		int sum = 0;
		for (int i = 0; i < weights.Size(); ++i)
		{
			sum += weights[i];
		}

		int rng = random[weightrand](0, sum);
		for (int i = 0; i < weights.Size(); ++i)
		{
			if (rng < weights[i])
			{
				return i;
			}
			rng -= weights[i];
		}
		return defRet;
	}
	
	// [Ace] This and CheckIfExists run a full range thinker so do not call them in ticking methods as it may get expensive.
	// Caution is advised.
	static clearscope bool CheckIfUnique(Actor other)
	{
		ThinkerIterator it = ThinkerIterator.Create(other.GetClass());
		Thinker t = null;
		while (t = it.Next())
		{
			if (t != other)
			{
				return false;
			}
		}
		return true;
	}
	
	static clearscope bool CheckIfExists(class<Actor> cls)
	{
		ThinkerIterator it = ThinkerIterator.Create(cls);
		if (it.Next() != null)
		{
			return true;
		}
		return false;
	}
}